<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Palmtree</name>
    </assembly>
    <members>
        <member name="T:Palmtree.SerializationFormatParameter">
            <summary>
            オブジェクトのシリアライズの書式を指定するオブジェクトのクラスです。
            </summary>
        </member>
        <member name="M:Palmtree.SerializationFormatParameter.#ctor">
            <summary>
             デフォルトコンストラクタです。
            </summary>
        </member>
        <member name="P:Palmtree.SerializationFormatParameter.DelimiterArrayLeft">
            <summary>
            配列の開きカッコの内側に挿入される文字列です。
            </summary>
        </member>
        <member name="P:Palmtree.SerializationFormatParameter.DelimiterArrayComma">
            <summary>
            配列の要素の区切りのカンマの後に挿入される文字列です。
            </summary>
        </member>
        <member name="P:Palmtree.SerializationFormatParameter.DelimiterArrayRight">
            <summary>
            配列の閉じカッコの内側に挿入される文字列です。
            </summary>
        </member>
        <member name="P:Palmtree.SerializationFormatParameter.DelimiterObjectLeft">
            <summary>
            オブジェクトの開きカッコの内側に挿入される文字列です。
            </summary>
        </member>
        <member name="P:Palmtree.SerializationFormatParameter.DelimiterObjecColon">
            <summary>
            オブジェクトの名前と値の区切りのコロンの後に挿入される文字列です。
            </summary>
        </member>
        <member name="P:Palmtree.SerializationFormatParameter.DelimiterObjecComma">
            <summary>
            オブジェクトの値の後のカンマの後に挿入される文字列です。
            </summary>
        </member>
        <member name="P:Palmtree.SerializationFormatParameter.DelimiterObjectRight">
            <summary>
            オブジェクトの閉じカッコの内側に挿入される文字列です。
            </summary>
        </member>
        <member name="T:Palmtree.ComparableCompositeKey`2">
            <summary>
            2つのオブジェクトを複合キーとして一度に比較するクラスです。
            </summary>
            <typeparam name="KEY1_T">
            1番目のクラスです。
            </typeparam>
            <typeparam name="KEY2_T">
            2番目のクラスです。
            </typeparam>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`2.#ctor(`0,`1)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="key1">
            1番目のクラスのオブジェクトです。
            </param>
            <param name="key2">
            2番目のクラスのオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`2.CompareTo(System.Object)">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`2.CompareTo(Palmtree.ComparableCompositeKey{`0,`1})">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="T:Palmtree.ComparableCompositeKey`3">
            <summary>
            3つのオブジェクトを複合キーとして一度に比較するクラスです。
            </summary>
            <typeparam name="KEY1_T">
            1番目のクラスです。
            </typeparam>
            <typeparam name="KEY2_T">
            2番目のクラスです。
            </typeparam>
            <typeparam name="KEY3_T">
            3番目のクラスです。
            </typeparam>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`3.#ctor(`0,`1,`2)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="key1">
            1番目のクラスのオブジェクトです。
            </param>
            <param name="key2">
            2番目のクラスのオブジェクトです。
            </param>
            <param name="key3">
            3番目のクラスのオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`3.CompareTo(System.Object)">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`3.CompareTo(Palmtree.ComparableCompositeKey{`0,`1,`2})">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="T:Palmtree.ComparableCompositeKey`4">
            <summary>
            5つのオブジェクトを複合キーとして一度に比較するクラスです。
            </summary>
            <typeparam name="KEY1_T">
            1番目のクラスです。
            </typeparam>
            <typeparam name="KEY2_T">
            2番目のクラスです。
            </typeparam>
            <typeparam name="KEY3_T">
            3番目のクラスです。
            </typeparam>
            <typeparam name="KEY4_T">
            4番目のクラスです。
            </typeparam>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`4.#ctor(`0,`1,`2,`3)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="key1">
            1番目のクラスのオブジェクトです。
            </param>
            <param name="key2">
            2番目のクラスのオブジェクトです。
            </param>
            <param name="key3">
            3番目のクラスのオブジェクトです。
            </param>
            <param name="key4">
            4番目のクラスのオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`4.CompareTo(System.Object)">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`4.CompareTo(Palmtree.ComparableCompositeKey{`0,`1,`2,`3})">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="T:Palmtree.ComparableCompositeKey`7">
            <summary>
            7つのオブジェクトを複合キーとして一度に比較するクラスです。
            </summary>
            <typeparam name="KEY1_T">
            1番目のクラスです。
            </typeparam>
            <typeparam name="KEY2_T">
            2番目のクラスです。
            </typeparam>
            <typeparam name="KEY3_T">
            3番目のクラスです。
            </typeparam>
            <typeparam name="KEY4_T">
            4番目のクラスです。
            </typeparam>
            <typeparam name="KEY5_T">
            5番目のクラスです。
            </typeparam>
            <typeparam name="KEY6_T">
            6番目のクラスです。
            </typeparam>
            <typeparam name="KEY7_T">
            7番目のクラスです。
            </typeparam>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="key1">
            1番目のクラスのオブジェクトです。
            </param>
            <param name="key2">
            2番目のクラスのオブジェクトです。
            </param>
            <param name="key3">
            3番目のクラスのオブジェクトです。
            </param>
            <param name="key4">
            4番目のクラスのオブジェクトです。
            </param>
            <param name="key5">
            5番目のクラスのオブジェクトです。
            </param>
            <param name="key6">
            6番目のクラスのオブジェクトです。
            </param>
            <param name="key7">
            7番目のクラスのオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`7.CompareTo(System.Object)">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`7.CompareTo(Palmtree.ComparableCompositeKey{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="T:Palmtree.ComparableCompositeKey`6">
            <summary>
            6つのオブジェクトを複合キーとして一度に比較するクラスです。
            </summary>
            <typeparam name="KEY1_T">
            1番目のクラスです。
            </typeparam>
            <typeparam name="KEY2_T">
            2番目のクラスです。
            </typeparam>
            <typeparam name="KEY3_T">
            3番目のクラスです。
            </typeparam>
            <typeparam name="KEY4_T">
            4番目のクラスです。
            </typeparam>
            <typeparam name="KEY5_T">
            5番目のクラスです。
            </typeparam>
            <typeparam name="KEY6_T">
            6番目のクラスです。
            </typeparam>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="key1">
            1番目のクラスのオブジェクトです。
            </param>
            <param name="key2">
            2番目のクラスのオブジェクトです。
            </param>
            <param name="key3">
            3番目のクラスのオブジェクトです。
            </param>
            <param name="key4">
            4番目のクラスのオブジェクトです。
            </param>
            <param name="key5">
            5番目のクラスのオブジェクトです。
            </param>
            <param name="key6">
            6番目のクラスのオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`6.CompareTo(System.Object)">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`6.CompareTo(Palmtree.ComparableCompositeKey{`0,`1,`2,`3,`4,`5})">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="T:Palmtree.ComparableCompositeKey`5">
            <summary>
            5つのオブジェクトを複合キーとして一度に比較するクラスです。
            </summary>
            <typeparam name="KEY1_T">
            1番目のクラスです。
            </typeparam>
            <typeparam name="KEY2_T">
            2番目のクラスです。
            </typeparam>
            <typeparam name="KEY3_T">
            3番目のクラスです。
            </typeparam>
            <typeparam name="KEY4_T">
            4番目のクラスです。
            </typeparam>
            <typeparam name="KEY5_T">
            5番目のクラスです。
            </typeparam>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="key1">
            1番目のクラスのオブジェクトです。
            </param>
            <param name="key2">
            2番目のクラスのオブジェクトです。
            </param>
            <param name="key3">
            3番目のクラスのオブジェクトです。
            </param>
            <param name="key4">
            4番目のクラスのオブジェクトです。
            </param>
            <param name="key5">
            5番目のクラスのオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`5.CompareTo(System.Object)">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="M:Palmtree.ComparableCompositeKey`5.CompareTo(Palmtree.ComparableCompositeKey{`0,`1,`2,`3,`4})">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="T:Palmtree.CompositeKey`7">
            <summary>
            7つのオブジェクトを複合キーとして一度に比較するクラスです。
            </summary>
            <typeparam name="KEY1_T">
            1番目のクラスです。
            </typeparam>
            <typeparam name="KEY2_T">
            2番目のクラスです。
            </typeparam>
            <typeparam name="KEY3_T">
            3番目のクラスです。
            </typeparam>
            <typeparam name="KEY4_T">
            4番目のクラスです。
            </typeparam>
            <typeparam name="KEY5_T">
            5番目のクラスです。
            </typeparam>
            <typeparam name="KEY6_T">
            6番目のクラスです。
            </typeparam>
            <typeparam name="KEY7_T">
            7番目のクラスです。
            </typeparam>
        </member>
        <member name="M:Palmtree.CompositeKey`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="key1">
            1番目のクラスのオブジェクトです。
            </param>
            <param name="key2">
            2番目のクラスのオブジェクトです。
            </param>
            <param name="key3">
            3番目のクラスのオブジェクトです。
            </param>
            <param name="key4">
            4番目のクラスのオブジェクトです。
            </param>
            <param name="key5">
            5番目のクラスのオブジェクトです。
            </param>
            <param name="key6">
            6番目のクラスのオブジェクトです。
            </param>
            <param name="key7">
            7番目のクラスのオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.CompositeKey`7.Equals(System.Object)">
            <summary>
            オブジェクトが等しいかどうか調べます。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            オブジェクトが等しければtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="M:Palmtree.CompositeKey`7.GetHashCode">
            <summary>
            オブジェクトのハッシュ値を計算します。
            </summary>
            <returns>
            計算されたハッシュ値です。
            </returns>
        </member>
        <member name="P:Palmtree.CompositeKey`7.Key1">
            <summary>
            1番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`7.Key2">
            <summary>
            2番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`7.Key3">
            <summary>
            3番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`7.Key4">
            <summary>
            4番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`7.Key5">
            <summary>
            5番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`7.Key6">
            <summary>
            6番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`7.Key7">
            <summary>
            7番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="M:Palmtree.CompositeKey`7.Equals(Palmtree.CompositeKey{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            オブジェクトが等しいかどうか調べます。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            オブジェクトが等しければtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="T:Palmtree.CompositeKey`6">
            <summary>
            6つのオブジェクトを複合キーとして一度に比較するクラスです。
            </summary>
            <typeparam name="KEY1_T">
            1番目のクラスです。
            </typeparam>
            <typeparam name="KEY2_T">
            2番目のクラスです。
            </typeparam>
            <typeparam name="KEY3_T">
            3番目のクラスです。
            </typeparam>
            <typeparam name="KEY4_T">
            4番目のクラスです。
            </typeparam>
            <typeparam name="KEY5_T">
            5番目のクラスです。
            </typeparam>
            <typeparam name="KEY6_T">
            6番目のクラスです。
            </typeparam>
        </member>
        <member name="M:Palmtree.CompositeKey`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="key1">
            1番目のクラスのオブジェクトです。
            </param>
            <param name="key2">
            2番目のクラスのオブジェクトです。
            </param>
            <param name="key3">
            3番目のクラスのオブジェクトです。
            </param>
            <param name="key4">
            4番目のクラスのオブジェクトです。
            </param>
            <param name="key5">
            5番目のクラスのオブジェクトです。
            </param>
            <param name="key6">
            6番目のクラスのオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.CompositeKey`6.Equals(System.Object)">
            <summary>
            オブジェクトが等しいかどうか調べます。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            オブジェクトが等しければtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="M:Palmtree.CompositeKey`6.GetHashCode">
            <summary>
            オブジェクトのハッシュ値を計算します。
            </summary>
            <returns>
            計算されたハッシュ値です。
            </returns>
        </member>
        <member name="P:Palmtree.CompositeKey`6.Key1">
            <summary>
            1番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`6.Key2">
            <summary>
            2番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`6.Key3">
            <summary>
            3番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`6.Key4">
            <summary>
            4番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`6.Key5">
            <summary>
            5番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`6.Key6">
            <summary>
            6番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="M:Palmtree.CompositeKey`6.Equals(Palmtree.CompositeKey{`0,`1,`2,`3,`4,`5})">
            <summary>
            オブジェクトが等しいかどうか調べます。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            オブジェクトが等しければtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="T:Palmtree.CompositeKey`5">
            <summary>
            5つのオブジェクトを複合キーとして一度に比較するクラスです。
            </summary>
            <typeparam name="KEY1_T">
            1番目のクラスです。
            </typeparam>
            <typeparam name="KEY2_T">
            2番目のクラスです。
            </typeparam>
            <typeparam name="KEY3_T">
            3番目のクラスです。
            </typeparam>
            <typeparam name="KEY4_T">
            4番目のクラスです。
            </typeparam>
            <typeparam name="KEY5_T">
            5番目のクラスです。
            </typeparam>
        </member>
        <member name="M:Palmtree.CompositeKey`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="key1">
            1番目のクラスのオブジェクトです。
            </param>
            <param name="key2">
            2番目のクラスのオブジェクトです。
            </param>
            <param name="key3">
            3番目のクラスのオブジェクトです。
            </param>
            <param name="key4">
            4番目のクラスのオブジェクトです。
            </param>
            <param name="key5">
            5番目のクラスのオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.CompositeKey`5.Equals(System.Object)">
            <summary>
            オブジェクトが等しいかどうか調べます。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            オブジェクトが等しければtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="M:Palmtree.CompositeKey`5.GetHashCode">
            <summary>
            オブジェクトのハッシュ値を計算します。
            </summary>
            <returns>
            計算されたハッシュ値です。
            </returns>
        </member>
        <member name="P:Palmtree.CompositeKey`5.Key1">
            <summary>
            1番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`5.Key2">
            <summary>
            2番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`5.Key3">
            <summary>
            3番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`5.Key4">
            <summary>
            4番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`5.Key5">
            <summary>
            5番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="M:Palmtree.CompositeKey`5.Equals(Palmtree.CompositeKey{`0,`1,`2,`3,`4})">
            <summary>
            オブジェクトが等しいかどうか調べます。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            オブジェクトが等しければtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="T:Palmtree.DateTimeExtensions">
            <summary>
            日時に関する拡張メソッドのクラスです。
            </summary>
        </member>
        <member name="M:Palmtree.DateTimeExtensions.FromTimeStampToDateTime(System.Int64)">
            <summary>
            与えられた整数を標準時の1970年1月1日0時0分0秒からのミリ秒数とみなし、それと同じ時刻を表す<see cref="T:System.DateTime"/>オブジェクトを返します。
            </summary>
            <param name="time_stamp">
            標準時の1970年1月1日0時0分0秒からのミリ秒数を表す整数です。
            </param>
            <returns>
            与えられた整数から計算された<see cref="T:System.DateTime"/>オブジェクトです。
            </returns>
        </member>
        <member name="M:Palmtree.DateTimeExtensions.FromDateTimeToTimeStamp(System.DateTime)">
            <summary>
            与えられた<see cref="T:System.DateTime"/>オブジェクトから、標準時の1970年1月1日0時0分0秒からのミリ秒数を返します。
            </summary>
            <param name="time">
            <see cref="T:System.DateTime"/>オブジェクトです。
            </param>
            <returns>
            与えられた<see cref="T:System.DateTime"/>オブジェクトから計算された整数です。
            </returns>
        </member>
        <member name="M:Palmtree.DateTimeExtensions.Max(System.DateTime,System.DateTime[])">
            <summary>
            与えられた<see cref="T:System.DateTime"/>オブジェクトの最大値を求めます。
            </summary>
            <param name="time">
            <see cref="T:System.DateTime"/>オブジェクトです。
            </param>
            <param name="additional_times">
            追加の<see cref="T:System.DateTime"/>オブジェクトです。
            </param>
            <returns>
            timeとadditional_timesで与えられた<see cref="T:System.DateTime"/>オブジェクトの最大値を求めます。
            </returns>
        </member>
        <member name="M:Palmtree.DateTimeExtensions.Min(System.DateTime,System.DateTime[])">
            <summary>
            与えられた<see cref="T:System.DateTime"/>オブジェクトの最小値を求めます。
            </summary>
            <param name="time">
            <see cref="T:System.DateTime"/>オブジェクトです。
            </param>
            <param name="additional_times">
            追加の<see cref="T:System.DateTime"/>オブジェクトです。
            </param>
            <returns>
            timeとadditional_timesで与えられた<see cref="T:System.DateTime"/>オブジェクトの最小値を求めます。
            </returns>
        </member>
        <member name="M:Palmtree.DateTimeExtensions.Max(System.TimeSpan,System.TimeSpan[])">
            <summary>
            与えられた<see cref="T:System.TimeSpan"/>オブジェクトの最大値を求めます。
            </summary>
            <param name="time">
            <see cref="T:System.TimeSpan"/>オブジェクトです。
            </param>
            <param name="additional_times">
            追加の<see cref="T:System.TimeSpan"/>オブジェクトです。
            </param>
            <returns>
            timeとadditional_timesで与えられた<see cref="T:System.TimeSpan"/>オブジェクトの最大値を求めます。
            </returns>
        </member>
        <member name="M:Palmtree.DateTimeExtensions.Min(System.TimeSpan,System.TimeSpan[])">
            <summary>
            与えられた<see cref="T:System.TimeSpan"/>オブジェクトの最小値を求めます。
            </summary>
            <param name="time">
            <see cref="T:System.TimeSpan"/>オブジェクトです。
            </param>
            <param name="additional_times">
            追加の<see cref="T:System.TimeSpan"/>オブジェクトです。
            </param>
            <returns>
            timeとadditional_timesで与えられた<see cref="T:System.TimeSpan"/>オブジェクトの最小値を求めます。
            </returns>
        </member>
        <member name="M:Palmtree.DateTimeExtensions.Multiply(System.TimeSpan,System.Double)">
            <summary>
            与えられた<see cref="T:System.TimeSpan"/>オブジェクトの、与えられた<see cref="T:System.Double"/>オブジェクト倍だけの長さを持つ時間を求めます。
            </summary>
            <param name="x">
            <see cref="T:System.TimeSpan"/>オブジェクトです。
            </param>
            <param name="y">
            <see cref="T:System.TimeSpan"/>オブジェクトに掛ける<see cref="T:System.Double"/>値です。
            </param>
            <returns>
            x の y 倍の長さを意味する<see cref="T:System.TimeSpan"/>オブジェクトです。
            </returns>
        </member>
        <member name="M:Palmtree.DateTimeExtensions.Divide(System.TimeSpan,System.Double)">
            <summary>
            与えられた<see cref="T:System.TimeSpan"/>オブジェクトの、(1 / 与えられた<see cref="T:System.Double"/>オブジェクト) だけの長さを持つ時間を求めます。
            </summary>
            <param name="x">
            <see cref="T:System.TimeSpan"/>オブジェクトです。
            </param>
            <param name="y">
            <see cref="T:System.TimeSpan"/>オブジェクトを割る<see cref="T:System.Double"/>値です。
            </param>
            <returns>
            x の 1 / y の長さを意味する<see cref="T:System.TimeSpan"/>オブジェクトです。
            </returns>
        </member>
        <member name="T:Palmtree.Descending`1">
            <summary>
            元のオブジェクトの大小関係を反転するラッパークラスです。
            </summary>
            <typeparam name="VALUE_T">
            元のオブジェクトの型です。
            </typeparam>
        </member>
        <member name="M:Palmtree.Descending`1.#ctor(`0)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="value">
            初期化に使用される元のオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.Descending`1.op_Implicit(`0)~Palmtree.Descending{`0}">
            <summary>
            VALUE_Tオブジェクトを暗黙的にDescending{VALUE_T}オブジェクトに型変換する演算子です。
            </summary>
            <param name="o">
            変換するVALUE_Tオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.Descending`1.op_Implicit(Palmtree.Descending{`0})~`0">
            <summary>
            Descending{VALUE_T}オブジェクトを暗黙的にVALUE_Tオブジェクトに型変換する演算子です。
            </summary>
            <param name="o">
            変換するDescending{VALUE_T}オブジェクトです。
            </param>
        </member>
        <member name="P:Palmtree.Descending`1.Value">
            <summary>
            元のオブジェクトです。
            </summary>
        </member>
        <member name="M:Palmtree.Descending`1.ToString">
            <summary>
            現在のオブジェクトを表す文字列を返します。
            </summary>
            <returns>
            現在のオブジェクトを表す文字列です。
            </returns>
        </member>
        <member name="M:Palmtree.Descending`1.CompareTo(System.Object)">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="M:Palmtree.Descending`1.CompareTo(Palmtree.Descending{`0})">
            <summary>
            オブジェクトの大小を比較します。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            このオブジェクトがoより大きいならば正の値、oと等しいならば0、oより小さいならば負の値を返します。
            </returns>
        </member>
        <member name="T:Palmtree.Diagnostics.BenchmarkCounter">
            <summary>
            指定されたコードの区間の所要時間を測定するオブジェクトのクラスです。
            </summary>
        </member>
        <member name="M:Palmtree.Diagnostics.BenchmarkCounter.#ctor(System.String)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="location">
            オブジェクトの名前です。
            この名前は一意である必要があります。
            </param>
        </member>
        <member name="M:Palmtree.Diagnostics.BenchmarkCounter.Start">
            <summary>
            所要時間のカウントを開始または再開します。
            </summary>
        </member>
        <member name="M:Palmtree.Diagnostics.BenchmarkCounter.Stop">
            <summary>
            所要時間のカウントを停止します。
            </summary>
        </member>
        <member name="P:Palmtree.Diagnostics.BenchmarkCounter.Location">
            <summary>
            オブジェクトの名前です。
            </summary>
        </member>
        <member name="P:Palmtree.Diagnostics.BenchmarkCounter.Count">
            <summary>
            所要時間のカウントが行なわれた回数です。
            </summary>
        </member>
        <member name="P:Palmtree.Diagnostics.BenchmarkCounter.Elapsed">
            <summary>
            所要時間の累計です。
            </summary>
        </member>
        <member name="T:Palmtree.Diagnostics.BenchmarkCounterCollection">
            <summary>
            <see cref="T:Palmtree.Diagnostics.BenchmarkCounter"/>オブジェクトのコレクションのクラスです。
            </summary>
        </member>
        <member name="M:Palmtree.Diagnostics.BenchmarkCounterCollection.#ctor">
            <summary>
            デフォルトコンストラクタです。
            </summary>
        </member>
        <member name="P:Palmtree.Diagnostics.BenchmarkCounterCollection.Item(System.String)">
            <summary>
            名前に対応する<see cref="T:Palmtree.Diagnostics.BenchmarkCounter"/>オブジェクトです。
            もし名前に一致するオブジェクトが存在しなかった場合には新規に<see cref="T:Palmtree.Diagnostics.BenchmarkCounter"/>オブジェクトが作成されます。
            </summary>
            <param name="location">
            <see cref="T:Palmtree.Diagnostics.BenchmarkCounter"/>オブジェクトの名前です。
            </param>
            <returns>
            見つかったあるいは作成された<see cref="T:Palmtree.Diagnostics.BenchmarkCounter"/>オブジェクトです。
            </returns>
            <remarks>
            測定対象のコードの区間を特定できる文字列を名前を<see cref="T:Palmtree.Diagnostics.BenchmarkCounter"/>オブジェクトの名前として使用すると、区間毎に所要時間の累計をカウントするようにできます。
            </remarks>
        </member>
        <member name="P:Palmtree.Diagnostics.BenchmarkCounterCollection.Items">
            <summary>
            <see cref="T:Palmtree.Diagnostics.BenchmarkCounter"/>オブジェクトのコレクションです。
            </summary>
        </member>
        <member name="T:Palmtree.Diagnostics.BenchmarkScope">
            <summary>
            指定されたコードの区間の所要時間を測定するためのヘルパクラスです。
            </summary>
            <example>
            BenchmarkCounterCollection counters = new BenchmarkCounterCollection();
            
            ...
            
            using (BenchmarkScope.Begin(counters[location]))
            {
                (測定対象のコード)
            }
            </example>
        </member>
        <member name="M:Palmtree.Diagnostics.BenchmarkScope.Begin(Palmtree.Diagnostics.BenchmarkCounter)">
            <summary>
            測定開始区間の最初にusingとともに呼び出すメソッドです。
            </summary>
            <param name="counter">
            測定に使用する<see cref="T:Palmtree.Diagnostics.BenchmarkCounter"/>オブジェクトです。
            </param>
            <returns>
            <see cref="T:System.IDisposable"/>オブジェクトです。
            このオブジェクトに対しDisposeが呼び出されると測定が停止します。
            </returns>
        </member>
        <member name="M:Palmtree.Diagnostics.BenchmarkScope.OnBegin">
            <summary>
            区間の開始時に呼び出されるメソッドです。
            </summary>
        </member>
        <member name="M:Palmtree.Diagnostics.BenchmarkScope.OnEnd">
            <summary>
            区間の終了時に呼び出されるメソッドです。
            </summary>
        </member>
        <member name="T:Palmtree.Diagnostics.CodeScope">
            <summary>
            指定したコードの区間の開始と終了時に特定のコードを実行させるクラスの基本クラスです。
            </summary>
        </member>
        <member name="M:Palmtree.Diagnostics.CodeScope.#ctor">
            <summary>
            コンストラクタです。
            </summary>
        </member>
        <member name="M:Palmtree.Diagnostics.CodeScope.Finalize">
            <summary>
            デストラクタです。
            </summary>
        </member>
        <member name="M:Palmtree.Diagnostics.CodeScope.OnBegin">
            <summary>
            区間の開始時に呼び出されるメソッドです。
            </summary>
        </member>
        <member name="M:Palmtree.Diagnostics.CodeScope.OnEnd">
            <summary>
            区間の終了時に呼び出されるメソッドです。
            </summary>
        </member>
        <member name="M:Palmtree.Diagnostics.CodeScope.Dispose(System.Boolean)">
            <summary>
            オブジェクトに割り当てられたリソースを解放します。
            </summary>
            <param name="disposing">
            <see cref="T:System.IDisposable"/>インターフェースにより明示的に解放が指示された場合にはtrue、デストラクタにより暗黙的に解放が指示された場合にはfalseです。
            </param>
        </member>
        <member name="M:Palmtree.Diagnostics.CodeScope.System#IDisposable#Dispose">
            <summary>
            オブジェクトに割り当てられたリソースを解放します。
            </summary>
        </member>
        <member name="T:Palmtree.CompositeKey`2">
            <summary>
            2つのオブジェクトを複合キーとして一度に比較するクラスです。
            </summary>
            <typeparam name="KEY1_T">
            1番目のクラスです。
            </typeparam>
            <typeparam name="KEY2_T">
            2番目のクラスです。
            </typeparam>
        </member>
        <member name="M:Palmtree.CompositeKey`2.#ctor(`0,`1)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="key1">
            1番目のクラスのオブジェクトです。
            </param>
            <param name="key2">
            2番目のクラスのオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.CompositeKey`2.Equals(System.Object)">
            <summary>
            オブジェクトが等しいかどうか調べます。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            オブジェクトが等しければtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="M:Palmtree.CompositeKey`2.GetHashCode">
            <summary>
            オブジェクトのハッシュ値を計算します。
            </summary>
            <returns>
            計算されたハッシュ値です。
            </returns>
        </member>
        <member name="P:Palmtree.CompositeKey`2.Key1">
            <summary>
            1番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`2.Key2">
            <summary>
            2番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="M:Palmtree.CompositeKey`2.Equals(Palmtree.CompositeKey{`0,`1})">
            <summary>
            オブジェクトが等しいかどうか調べます。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            オブジェクトが等しければtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="T:Palmtree.CompositeKey`3">
            <summary>
            3つのオブジェクトを複合キーとして一度に比較するクラスです。
            </summary>
            <typeparam name="KEY1_T">
            1番目のクラスです。
            </typeparam>
            <typeparam name="KEY2_T">
            2番目のクラスです。
            </typeparam>
            <typeparam name="KEY3_T">
            3番目のクラスです。
            </typeparam>
        </member>
        <member name="M:Palmtree.CompositeKey`3.#ctor(`0,`1,`2)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="key1">
            1番目のクラスのオブジェクトです。
            </param>
            <param name="key2">
            2番目のクラスのオブジェクトです。
            </param>
            <param name="key3">
            3番目のクラスのオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.CompositeKey`3.Equals(System.Object)">
            <summary>
            オブジェクトが等しいかどうか調べます。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            オブジェクトが等しければtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="M:Palmtree.CompositeKey`3.GetHashCode">
            <summary>
            オブジェクトのハッシュ値を計算します。
            </summary>
            <returns>
            計算されたハッシュ値です。
            </returns>
        </member>
        <member name="P:Palmtree.CompositeKey`3.Key1">
            <summary>
            1番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`3.Key2">
            <summary>
            2番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`3.Key3">
            <summary>
            3番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="M:Palmtree.CompositeKey`3.Equals(Palmtree.CompositeKey{`0,`1,`2})">
            <summary>
            オブジェクトが等しいかどうか調べます。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            オブジェクトが等しければtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="T:Palmtree.CompositeKey`4">
            <summary>
            4つのオブジェクトを複合キーとして一度に比較するクラスです。
            </summary>
            <typeparam name="KEY1_T">
            1番目のクラスです。
            </typeparam>
            <typeparam name="KEY2_T">
            2番目のクラスです。
            </typeparam>
            <typeparam name="KEY3_T">
            3番目のクラスです。
            </typeparam>
            <typeparam name="KEY4_T">
            4番目のクラスです。
            </typeparam>
        </member>
        <member name="M:Palmtree.CompositeKey`4.#ctor(`0,`1,`2,`3)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="key1">
            1番目のクラスのオブジェクトです。
            </param>
            <param name="key2">
            2番目のクラスのオブジェクトです。
            </param>
            <param name="key3">
            3番目のクラスのオブジェクトです。
            </param>
            <param name="key4">
            4番目のクラスのオブジェクトです。
            </param>
        </member>
        <member name="M:Palmtree.CompositeKey`4.Equals(System.Object)">
            <summary>
            オブジェクトが等しいかどうか調べます。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            オブジェクトが等しければtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="M:Palmtree.CompositeKey`4.GetHashCode">
            <summary>
            オブジェクトのハッシュ値を計算します。
            </summary>
            <returns>
            計算されたハッシュ値です。
            </returns>
        </member>
        <member name="P:Palmtree.CompositeKey`4.Key1">
            <summary>
            1番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`4.Key2">
            <summary>
            2番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`4.Key3">
            <summary>
            3番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="P:Palmtree.CompositeKey`4.Key4">
            <summary>
            4番目のクラスのオブジェクトです。
            </summary>
        </member>
        <member name="M:Palmtree.CompositeKey`4.Equals(Palmtree.CompositeKey{`0,`1,`2,`3})">
            <summary>
            オブジェクトが等しいかどうか調べます。
            </summary>
            <param name="o">
            比較対象のオブジェクトです。
            </param>
            <returns>
            オブジェクトが等しければtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="T:Palmtree.ContentTypeInfo">
            <summary>
            MIMEタイプに関する情報を持つクラスです。
            </summary>
        </member>
        <member name="P:Palmtree.ContentTypeInfo.MIMEMediaType">
            <summary>
            MIMEタイプの文字列です。
            </summary>
        </member>
        <member name="P:Palmtree.ContentTypeInfo.FileExtension">
            <summary>
            ファイルの拡張子です。
            </summary>
        </member>
        <member name="M:Palmtree.ContentTypeInfo.FromMIMEMediaType(System.String)">
            <summary>
            MIMEタイプに対応する<see cref="T:Palmtree.ContentTypeInfo"/>オブジェクトを取得します。
            </summary>
            <param name="mime_media_type">
            MIMEタイプです。
            </param>
            <returns>
            見つかった<see cref="T:Palmtree.ContentTypeInfo"/>オブジェクトです。
            </returns>
        </member>
        <member name="M:Palmtree.ContentTypeInfo.FromExtension(System.String)">
            <summary>
            ファイルの拡張子に対応する<see cref="T:Palmtree.ContentTypeInfo"/>オブジェクトを取得します。
            </summary>
            <param name="ext">
            ファイルの拡張子です。
            </param>
            <returns>
            見つかった<see cref="T:Palmtree.ContentTypeInfo"/>オブジェクトです。
            </returns>
        </member>
        <member name="T:Palmtree.BASE32Extensions">
            <summary>
            データの変換を行う拡張メソッドのクラスです。
            </summary>
        </member>
        <member name="M:Palmtree.BASE32Extensions.ToBase32String(System.Byte[])">
            <summary>
            バイト配列をBASE32形式の文字列に変換します。
            </summary>
            <param name="data">
            変換するバイト配列です。
            </param>
            <returns>
            変換されたBASE32形式の文字列です。
            </returns>
        </member>
        <member name="M:Palmtree.BASE32Extensions.FromBase32String(System.String)">
            <summary>
            BASE32形式の文字列をバイト配列に変換します。
            </summary>
            <param name="s">
            変換するBASE32形式の文字列です。
            </param>
            <returns>
            変換されたバイト配列です。
            </returns>
        </member>
        <member name="T:Palmtree.GenericExtensions">
            <summary>
            一般的な型に関する拡張メソッドのクラスです。
            </summary>
        </member>
        <member name="M:Palmtree.GenericExtensions.Between``1(``0,``0,``0)">
            <summary>
            与えられた値が、ある範囲内にあるかどうかを調べます。
            </summary>
            <typeparam name="VALUE_T">
            値の型です。この型は<see cref="T:System.IComparable"/>インターフェースを実装している必要があります。
            </typeparam>
            <param name="value">
            調べる値です。
            </param>
            <param name="low_value">
            調べる範囲の下限です。
            </param>
            <param name="high_value">
            調べる範囲の上限です。
            </param>
            <returns>
            value が low_value 以上かつ high_value 以下であれば true、そうではないのならfalseです。
            </returns>
        </member>
        <member name="M:Palmtree.GenericExtensions.IsAnyOf``1(``0,``0[])">
            <summary>
            与えられた配列の中に与えられた値と等しい要素が含まれているかどうかを調べます。
            </summary>
            <typeparam name="VALUE_T">
            値の型です。
            </typeparam>
            <param name="x">
            比較する値です。
            </param>
            <param name="y_array">
            比較する配列です。
            </param>
            <returns>
            y_arrayの中にxとEqualsによる比較で一致する要素が存在すればtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="T:Palmtree.IGenericComparer`1">
            <summary>
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>と<see cref="T:System.Collections.Generic.IComparer`1"/>を含んだインターフェースです。
            </summary>
            <typeparam name="ITEM_T">
            比較するオブジェクトの型です。
            </typeparam>
        </member>
        <member name="T:Palmtree.Configuration.SettingsExtensions">
            <summary>
            アプリケーションの設定に関する拡張メソッドのクラスです。
            </summary>
        </member>
        <member name="M:Palmtree.Configuration.SettingsExtensions.UpgradeOnVersionUp``1(``0,System.Func{``0,System.String},System.Action{``0,System.String})">
            <summary>
            前回実行時からアセンブリのバージョンが上がっているかどうかを調べ、上がっていれば設定を前のバージョンから引き継ぎます。
            </summary>
            <typeparam name="SETTING_T">
            設定オブジェクトの型です。
            </typeparam>
            <param name="settings">
            設定オブジェクトです。
            </param>
            <param name="version_getter">
            設定オブジェクトからバージョン文字列を取得するゲッターです。
            </param>
            <param name="version_setter">
            設定オブジェクトにバージョン文字列を設定するセッターです。
            </param>
        </member>
        <member name="T:Palmtree.IO.FileExtensions">
            <summary>
            <see cref="T:System.IO.FileInfo"/>の拡張メソッドのクラスです。
            </summary>
        </member>
        <member name="M:Palmtree.IO.FileExtensions.ComputeHash(System.IO.FileInfo)">
            <summary>
            与えられた<see cref="T:System.IO.FileInfo"/>オブジェクトが示すファイルの内容のハッシュ値を計算します。
            </summary>
            <param name="info">
            ハッシュ値を計算するファイルです。
            </param>
            <returns>
            計算されたハッシュ値です。
            </returns>
        </member>
        <member name="T:Palmtree.IO.TemporaryFile">
            <summary>
            一意の名前を持つ一時ファイル名を管理するクラスです。
            </summary>
        </member>
        <member name="M:Palmtree.IO.TemporaryFile.#ctor">
            <summary>
            コンストラクタです。
            </summary>
        </member>
        <member name="M:Palmtree.IO.TemporaryFile.Finalize">
            <summary>
            デストラクタです。
            </summary>
        </member>
        <member name="P:Palmtree.IO.TemporaryFile.FilePath">
            <summary>
            一時ファイルのパス名を取得します。
            </summary>
        </member>
        <member name="M:Palmtree.IO.TemporaryFile.Dispose">
            <summary> 
            使用中のリソースをすべてクリーンアップします。
            </summary>
        </member>
        <member name="M:Palmtree.IO.TemporaryFile.Dispose(System.Boolean)">
            <summary> 
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">
            マネージ リソースが破棄される場合 true、破棄されない場合は false です。
            </param>
        </member>
        <member name="T:Palmtree.SimpleJson">
            <summary>
            オブジェクトとJSON形式のテキストの相互変換を行うクラスです。
            </summary>
            <remarks>
            <seealso cref="T:Palmtree.SimpleJson"/>で直接シリアライズ/デシリアライズ可能なのは以下の種類のオブジェクトのみです。
            <list type="bullet">
                <item>
                    <description><seealso cref="T:System.SByte"/>/<seealso cref="T:System.Byte"/>/<seealso cref="T:System.Int16"/>/<seealso cref="T:System.UInt16"/>/<seealso cref="T:System.Int32"/>/<seealso cref="T:System.UInt32"/>/<seealso cref="T:System.Int64"/>/<seealso cref="T:System.UInt64"/>/<seealso cref="T:System.Double"/>/<seealso cref="T:System.Decimal"/>(数値として扱われます)</description>
                </item>
                <item>
                    <description><seealso cref="T:System.String"/>/<seealso cref="T:System.Char"/>(文字列として扱われます)</description>
                </item>
                <item>
                    <description>true/false/null</description>
                </item>
                <item>
                    <description><seealso cref="T:System.String"/>以外の<seealso cref="T:System.Collections.IEnumerable"/> を実装するクラスのオブジェクト(配列として扱われます)</description>
                </item>
                <item>
                    <description>IDictionary&lt;string,object&gt; を実装するクラスのオブジェクト(名前付きのメンバーを持つオブジェクトとして扱われます)</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:Palmtree.SimpleJson.Deserialize(System.String)">
            <summary>
            与えられた文字列をJSON形式のテキストとみなして、デシリアライズを行います。
            </summary>
            <param name="source_string">
            JSON形式のテキストです。
            </param>
            <returns>
            デシリアライズされたオブジェクトです。
            </returns>
        </member>
        <member name="M:Palmtree.SimpleJson.Serialize(System.Object,Palmtree.SerializationFormatParameter)">
            <summary>
            オブジェクトをJSON形式のテキストにシリアライズします。
            </summary>
            <param name="source_object">
            シリアライズするオブジェクトです。
            </param>
            <param name="param">
            シリアライズの書式のパラメタです。
            </param>
            <returns>
            JSON形式のテキストです。
            </returns>
        </member>
        <member name="M:Palmtree.SimpleJson.CastObjectAsLong(System.Object,System.Nullable{System.Int64})">
            <summary>
            与えられたオブジェクトをlong型とみなして値を変換します。
            </summary>
            <param name="source_object">
            変換元のオブジェクトです。
            </param>
            <param name="default_value">
            与えられたオブジェクトをlong型に変換できなかった場合に返す既定の値です。
            nullが与えられた場合は、変換できなかった時に例外を通知します。
            </param>
            <returns>
            変換されたlong値です。
            </returns>
        </member>
        <member name="M:Palmtree.SimpleJson.CastObjectAsDouble(System.Object,System.Nullable{System.Double})">
            <summary>
            与えられたオブジェクトをdouble型とみなして値を変換します。
            </summary>
            <param name="source_object">
            変換元のオブジェクトです。
            </param>
            <param name="default_value">
            与えられたオブジェクトをdouble型に変換できなかった場合に返す既定の値です。
            nullが与えられた場合は、変換できなかった時に例外を通知します。
            </param>
            <returns>
            変換されたdouble値です。
            </returns>
        </member>
        <member name="M:Palmtree.SimpleJson.CastObjectAsDecimal(System.Object,System.Nullable{System.Decimal})">
            <summary>
            与えられたオブジェクトをdecimal型とみなして値を変換します。
            </summary>
            <param name="source_object">
            変換元のオブジェクトです。
            </param>
            <param name="default_value">
            与えられたオブジェクトをdecimal型に変換できなかった場合に返す既定の値です。
            nullが与えられた場合は、変換できなかった時に例外を通知します。
            </param>
            <returns>
            変換されたdecimal値です。
            </returns>
        </member>
        <member name="T:Palmtree.HiraganaKatakanaConversionSpesicication">
            <summary>
            ひらがな/カタカナ変換で指定されるオプション動作の列挙体です。
            </summary>
        </member>
        <member name="F:Palmtree.HiraganaKatakanaConversionSpesicication.None">
            <summary>
            指定なし。
            </summary>
        </member>
        <member name="F:Palmtree.HiraganaKatakanaConversionSpesicication.ConvertLetterNotInCommonUse">
            <summary>
            「ゔ」をカタカナ「ヴ」のひらがなとみなします。
            </summary>
        </member>
        <member name="T:Palmtree.StringExtensions">
            <summary>
            文字列の拡張メソッドのクラスです。
            </summary>
        </member>
        <member name="M:Palmtree.StringExtensions.CsvEncode(System.String)">
            <summary>
            文字列をCSVに埋め込める形式に変換します。
            ダブルクォートやカンマ、その他の特殊文字はHTMLエンコードされます。
            </summary>
            <param name="text">変換元の文字列です。
            </param>
            <returns>
            変換先の文字列です。
            </returns>
        </member>
        <member name="M:Palmtree.StringExtensions.CsvDecode(System.String)">
            <summary>
            CSVに埋め込まれていた文字を復元します。
            HTMLエスケープ文字列も復元されます。
            </summary>
            <param name="text">
            変換元の文字列です。
            </param>
            <returns>
            変換先の文字列です。
            </returns>
        </member>
        <member name="M:Palmtree.StringExtensions.ComputeHashBytes(System.Byte[])">
            <summary>
            与えられたバイト配列のハッシュ(SHA512)を計算します。
            </summary>
            <param name="data">
            ハッシュを計算するバイト配列です。
            </param>
            <returns>
            計算されたハッシュ値を表すバイト配列です。
            </returns>
        </member>
        <member name="M:Palmtree.StringExtensions.CompressHashBytes(System.Byte[],System.Int32)">
            <summary>
            ハッシュを示す与えられたバイト配列を与えられた長さに圧縮します。
            </summary>
            <param name="data">
            ハッシュを示すバイト配列です。
            </param>
            <param name="length">
            圧縮する長さです。
            </param>
            <returns>
            圧縮されたバイト配列です。この配列の長さは必ずlengthになります。
            </returns>
        </member>
        <member name="M:Palmtree.StringExtensions.EncodeFromHashBytes(System.Byte[])">
            <summary>
            与えられたバイト列を文字列にエンコードします。
            このエンコード方式では5bitが英小文字または数字の1文字に変換されます。
            </summary>
            <param name="data">
            エンコードするバイト列です。
            </param>
            <returns>
            エンコードされた文字列です。
            </returns>
        </member>
        <member name="M:Palmtree.StringExtensions.DecodeToHashBytes(System.String)">
            <summary>
            EncodeFromHashBytesでエンコードされた文字列をデコードします。
            </summary>
            <param name="data">
            エンコードされた文字列です。
            </param>
            <returns>
            デコードされたバイト列です。
            </returns>
        </member>
        <member name="M:Palmtree.StringExtensions.ComputeHashString(System.Byte[])">
            <summary>
            与えられたバイト配列のハッシュ(SHA512)を計算します。
            </summary>
            <param name="data">
            ハッシュを計算するバイト配列です。
            </param>
            <returns>
            計算されたハッシュ値を表す文字列です。
            </returns>
        </member>
        <member name="M:Palmtree.StringExtensions.ComputeHashString(System.String)">
            <summary>
            与えられた文字列のハッシュ(SHA512)を計算します。
            </summary>
            <param name="text">
            ハッシュを計算する文字列です。文字コードはUTF8として扱われます。
            </param>
            <returns>
            計算されたハッシュ値を表す文字列です。
            </returns>
        </member>
        <member name="M:Palmtree.StringExtensions.ToHiragana(System.String,Palmtree.HiraganaKatakanaConversionSpesicication)">
            <summary>
            与えられた文字列に含まれているカタカナをひらがなに置換した文字列を返します。
            </summary>
            <param name="s">
            変換元の文字列です。
            </param>
            <param name="spec">
            変換時に適用されるオプション動作のフラグです。
            </param>
            <returns>
            変換された文字列です。
            </returns>
        </member>
        <member name="M:Palmtree.StringExtensions.ToKatakana(System.String,Palmtree.HiraganaKatakanaConversionSpesicication)">
            <summary>
            与えられた文字列に含まれているひらがなをカタカナに置換した文字列を返します。
            </summary>
            <param name="s">
            変換元の文字列です。
            </param>
            <param name="spec">
            変換時に適用されるオプション動作のフラグです。
            </param>
            <returns>
            変換された文字列です。
            </returns>
        </member>
        <member name="M:Palmtree.StringExtensions.IsHiragana(System.String,Palmtree.HiraganaKatakanaConversionSpesicication)">
            <summary>
            与えられた文字列がすべてひらがなから構成されているかどうかを調べます。
            </summary>
            <param name="s">
            調べる対象の文字列です。
            </param>
            <param name="spec">
            調べる際に適用されるオプション動作のフラグです。
            </param>
            <returns>
            与えられた文字列に含まれる文字がすべてひらがなであればtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="M:Palmtree.StringExtensions.IsKatakana(System.String,Palmtree.HiraganaKatakanaConversionSpesicication)">
            <summary>
            与えられた文字列がすべてカタカナから構成されているかどうかを調べます。
            </summary>
            <param name="s">
            調べる対象の文字列です。
            </param>
            <param name="spec">
            調べる際に適用されるオプション動作のフラグです。
            </param>
            <returns>
            与えられた文字列に含まれる文字がすべてカタカナであればtrue、そうではないのならfalseです。
            </returns>
        </member>
        <member name="T:Palmtree.Threading.ILockable">
            <summary>
            オブジェクトに対しロックした後アンロックすることを保証するための汎用インターフェースです。
            </summary>
        </member>
        <member name="M:Palmtree.Threading.ILockable.Lock">
            <summary>
            オブジェクトをロック状態にします。
            </summary>
        </member>
        <member name="M:Palmtree.Threading.ILockable.Unlock">
            <summary>
            オブジェクトをアンロック状態にします。
            </summary>
        </member>
        <member name="T:Palmtree.Threading.Lock">
            <summary>
            DisposeされるときにILockable.Unlockを呼び出す、汎用ロックオブジェクトです。
            </summary>
        </member>
        <member name="M:Palmtree.Threading.Lock.Create(Palmtree.Threading.ILockable)">
            <summary>
            usingステートメントで使用する<see cref="T:System.IDisposable"/>オブジェクトを生成します。
            </summary>
            <param name="obj">
            DisposeされるときにUnlockを呼び出す<see cref="T:Palmtree.Threading.ILockable"/>オブジェクトです。
            </param>
            <returns>
            usingステートメントで使用する<see cref="T:System.IDisposable"/>オブジェクトです。
            </returns>
        </member>
        <member name="T:Palmtree.Threading.LockObjectByMutex">
            <summary>
            <see cref="T:Palmtree.Threading.Lock"/>クラスと共に使用し、<see cref="T:Palmtree.Threading.Lock"/>オブジェクトのDispose時にMutexの排他の解放を保証するためのクラスです。
            </summary>
        </member>
        <member name="M:Palmtree.Threading.LockObjectByMutex.#ctor(System.Threading.Mutex)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="mutex">
            排他のために使用する<see cref="T:System.Threading.Mutex"/>オブジェクトです。
            </param>
        </member>
    </members>
</doc>
